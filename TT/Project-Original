#include <WiFiManager.h>
#include <BlynkSimpleEsp32.h>
#include <DHT.h>
#include <HTTPClient.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Blynk**
const char auth[] = "Ca9S9BOutnzOnKRXX7UIav76sFdtZVsY";

// **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Telegram Bot**
const char* telegramBotToken = "8178669136:AAHmOXetwGN10LQF6LE1vfDNJkbf45XzArc";
const char* chatID = "7631878885";

// **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå**
#define SOUND_SENSOR_A0 34
#define SOUND_SENSOR_D0 4
#define DHTPIN 15
#define DHTTYPE DHT11
#define SAMPLE_WINDOW 500
#define SAMPLE_COUNT 10
#define TELEGRAM_COOLDOWN 10000
#define REFERENCE_VOLTAGE 0.0005

DHT dht(DHTPIN, DHTTYPE);
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 25200);

unsigned long lastTelegramSent = 0;
unsigned long lastCheckTime = 0;
float smoothedDb = 0;
int soundThreshold = 50; // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Slider

void setupWiFi() {
    WiFiManager wifiManager;
    wifiManager.autoConnect("WiFi_citysound");
    Serial.println("‚úÖ Wi-Fi Connected!");
}

void setup() {
    Serial.begin(115200);
    pinMode(SOUND_SENSOR_D0, INPUT);
    dht.begin();
    setupWiFi();
    Blynk.begin(auth, WiFi.SSID().c_str(), WiFi.psk().c_str(), "iotservices.thddns.net", 5535);
    Blynk.connect();
    timeClient.begin();
}

BLYNK_WRITE(V3) {
    soundThreshold = param.asInt();
    Serial.printf("üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà: %d dB\n", soundThreshold);
}

void sendTelegramMessage(float soundLevel) {
    if (WiFi.status() != WL_CONNECTED) return;
    timeClient.update();
    String currentTime = timeClient.getFormattedTime();
    HTTPClient http;
    http.begin("https://api.telegram.org/bot" + String(telegramBotToken) + "/sendMessage");
    http.addHeader("Content-Type", "application/json");
    String message = "{\"chat_id\":\"" + String(chatID) + "\",\"text\":\"‚ö†Ô∏è ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î! ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: " + String(soundLevel) + " dB\n‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: " + currentTime + "\"}";
    http.POST(message);
    http.end();
}

float measureSoundLevel() {
    float totalDb = 0;
    for (int i = 0; i < SAMPLE_COUNT; i++) {
        unsigned long startMillis = millis();
        int signalMax = 0, signalMin = 4095;
        while (millis() - startMillis < SAMPLE_WINDOW / SAMPLE_COUNT) {
            int sample = analogRead(SOUND_SENSOR_A0);
            signalMax = max(signalMax, sample);
            signalMin = min(signalMin, sample);
        }
        int peakToPeak = signalMax - signalMin;
        float voltage = (peakToPeak * 3.3) / 4095.0;
        float dB = (voltage > 0) ? 20 * log10(voltage / REFERENCE_VOLTAGE) : 0;
        totalDb += dB;
        delay(10);
    }
    return totalDb / SAMPLE_COUNT;
}

void loop() {
    Blynk.run();
    timeClient.update();
    
    if (millis() - lastCheckTime >= 1000) {
        lastCheckTime = millis();
        float dB = measureSoundLevel();
        smoothedDb = (0.7 * smoothedDb) + (0.3 * dB);
        float temperature = dht.readTemperature();
        float humidity = dht.readHumidity();
        String currentTime = timeClient.getFormattedTime();

        if (!isnan(temperature) && !isnan(humidity)) {
            Blynk.virtualWrite(V0, smoothedDb);
            Blynk.virtualWrite(V1, temperature);
            Blynk.virtualWrite(V2, humidity);
            Serial.printf("Temp: %.2f ¬∞C, Humidity: %.2f %%, Sound Level: %.2f dB, Time: %s\n", temperature, humidity, smoothedDb, currentTime.c_str());

            if (smoothedDb > soundThreshold && millis() - lastTelegramSent > TELEGRAM_COOLDOWN) {
                sendTelegramMessage(smoothedDb);
                lastTelegramSent = millis();
            }
        }
    }
}
