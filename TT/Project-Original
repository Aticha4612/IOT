#include <WiFiManager.h> // ไลบรารี WiFiManager
#include <BlynkSimpleEsp32.h>
#include <DHT.h>
#include <HTTPClient.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// **ข้อมูล Blynk**
const char auth[] = "Ca9S9BOutnzOnKRXX7UIav76sFdtZVsY";  // Auth Token จาก Blynk

// **ข้อมูล Telegram Bot**
const char* telegramBotToken = "8178669136:AAHmOXetwGN10LQF6LE1vfDNJkbf45XzArc";
const char* chatID = "7631878885";

// **กำหนดขาเซนเซอร์**
#define SOUND_SENSOR_A0 34  // KY-038 (A0) → GPIO 34A
#define SOUND_SENSOR_D0 4   // KY-038 (D0) → GPIO 4
#define DHTPIN 15           // DHT11 (DATA) → GPIO 15
#define DHTTYPE DHT11       // ใช้ DHT11
#define SAMPLE_WINDOW 500   // เวลาตรวจจับเสียง (ms)
#define SAMPLE_COUNT 10     // จำนวนรอบการคำนวณค่าเฉลี่ย
#define SOUND_THRESHOLD 50  // ตั้งค่าแจ้งเตือนเมื่อเสียงเกิน 50 dB
#define TELEGRAM_COOLDOWN 10000 // แจ้งเตือน Telegram ทุก 10 วินาที
#define REFERENCE_VOLTAGE 0.0005 // ค่ามาตรฐานอ้างอิงสำหรับคำนวณ dB

DHT dht(DHTPIN, DHTTYPE);
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 25200); // GMT+7

unsigned long lastTelegramSent = 0;
unsigned long lastCheckTime = 0;
float smoothedDb = 0; // ค่าเฉลี่ยถ่วงน้ำหนักของเสียง

void setupWiFi() {
    WiFiManager wifiManager;
    wifiManager.autoConnect("WiFi_citysound"); // สร้าง AP ถ้าไม่มี Wi-Fi ที่บันทึกไว้
    Serial.println("✅ Wi-Fi Connected!");
}

void setup() {
    Serial.begin(115200);
    pinMode(SOUND_SENSOR_D0, INPUT);
    dht.begin();

    // **ตั้งค่า WiFi**
    setupWiFi();

    // **เชื่อมต่อ Blynk Server**
    Blynk.begin(auth, WiFi.SSID().c_str(), WiFi.psk().c_str(), "iotservices.thddns.net", 5535);
    Blynk.connect();

    // **เริ่มต้น NTP Client**
    timeClient.begin();
}

// **ฟังก์ชันแจ้งเตือน Telegram**
void sendTelegramMessage(float soundLevel) {
    if (WiFi.status() != WL_CONNECTED) return;
    
    timeClient.update();
    String currentTime = timeClient.getFormattedTime();
    
    HTTPClient http;
    http.begin("https://api.telegram.org/bot" + String(telegramBotToken) + "/sendMessage");
    http.addHeader("Content-Type", "application/json");
    String message = "{\"chat_id\":\"" + String(chatID) + "\",\"text\":\"⚠️ เสียงดังเกินกำหนด! ระดับเสียง: " + String(soundLevel) + " dB\nเวลาที่ตรวจจับ: " + currentTime + "\"}";
    http.POST(message);
    http.end();
}

float measureSoundLevel() {
    float totalDb = 0;
    for (int i = 0; i < SAMPLE_COUNT; i++) {
        unsigned long startMillis = millis();
        int signalMax = 0, signalMin = 4095;
        while (millis() - startMillis < SAMPLE_WINDOW / SAMPLE_COUNT) {
            int sample = analogRead(SOUND_SENSOR_A0);
            signalMax = max(signalMax, sample);
            signalMin = min(signalMin, sample);
        }
        int peakToPeak = signalMax - signalMin;
        float voltage = (peakToPeak * 3.3) / 4095.0;
        float dB = (voltage > 0) ? 20 * log10(voltage / REFERENCE_VOLTAGE) : 0;
        totalDb += dB;
        delay(10);
    }
    return totalDb / SAMPLE_COUNT; // ค่าเฉลี่ยของ dB
}

void loop() {
    Blynk.run();
    timeClient.update();
    
    if (millis() - lastCheckTime >= 1000) {  // ตรวจสอบทุก 1 วินาที
        lastCheckTime = millis();
        float dB = measureSoundLevel();

        // **ฟิลเตอร์ค่าเฉลี่ยถ่วงน้ำหนัก**
        smoothedDb = (0.7 * smoothedDb) + (0.3 * dB);

        float temperature = dht.readTemperature();
        float humidity = dht.readHumidity();
        String currentTime = timeClient.getFormattedTime();

        if (!isnan(temperature) && !isnan(humidity)) {
            Blynk.virtualWrite(V0, smoothedDb);
            Blynk.virtualWrite(V1, temperature);
            Blynk.virtualWrite(V2, humidity);
            Serial.printf("Temp: %.2f °C, Humidity: %.2f %%, Sound Level: %.2f dB, Time: %s\n", temperature, humidity, smoothedDb, currentTime.c_str());

            if (smoothedDb > SOUND_THRESHOLD && millis() - lastTelegramSent > TELEGRAM_COOLDOWN) {
                sendTelegramMessage(smoothedDb);
                lastTelegramSent = millis();
            }
        }
    }
}
